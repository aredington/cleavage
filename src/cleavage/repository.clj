(ns cleavage.repository
  (:use [clojure.java.io])
  (:require [clojure.string :as str]
	    [clojure.contrib.strint :as strint])
  (:import (org.eclipse.jgit.lib Repository RepositoryBuilder Constants)
	   (org.eclipse.jgit.revwalk RevCommit RevWalk)
	   (org.eclipse.jgit.treewalk.filter PathFilter TreeFilter AndTreeFilter)))

(defn targetdir
  "returns the directory to be analyzed by cleavage"
  [dir]
  (file dir))

(defn repository
  "a JGit Repository instance generated by readings *git-targetdir*"
  [dir]
  (.. (RepositoryBuilder.) (findGitDir (targetdir dir)) (build)))

(defn relative-path
  [dir file]
  (str/replace (.getPath file) dir ""))

(defn repository-resolve
  [dir revision]
  (.resolve (repository dir) revision))

(defn commit-count
  "a count of all the commits touching a specific file"
  [dir file revsision]
  (let [rw (RevWalk. (repository dir))]
    (.markStart rw (.parseCommit rw (repository-resolve dir revsision)))
    (.setTreeFilter rw (AndTreeFilter/create (PathFilter/create (relative-path dir file)) TreeFilter/ANY_DIFF))
    (count (seq rw))))

(defn revisions
  "list all the revisions in a dir"
  [dir]
  (let [rw (RevWalk. (repository dir))]
    (.markStart rw (.parseCommit rw (repository-resolve dir "HEAD")))
    (map #(.name %1) (seq rw))))

(defn revision-contents
  [dir file revision]
  (let [resolve-query (strint/<< "~{revision}:~(relative-path dir file)")
	versioned-object-id (repository-resolve dir resolve-query)]
    (if (nil? versioned-object-id)
      ""
      (slurp (.. (repository dir) (open versioned-object-id) openStream)))))

(defn target-files
  "returns lazyseq of all the files in targetdir"
  [dir]
  (filter
   #(re-find (re-pattern "\\.java$")
	     (.getName %1))
   (file-seq (targetdir dir))))
