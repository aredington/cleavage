(ns cleavage.core
  (:use [penumbra opengl]
	[clojure.java.io])
  (:require [penumbra.app :as app]
	    [clojure.string :as str])
  (:import (org.eclipse.jgit.lib Repository RepositoryBuilder)
	   (org.eclipse.jgit.revwalk RevCommit RevWalk)
	   (org.eclipse.jgit.treewalk.filter PathFilter TreeFilter AndTreeFilter)))

(def *git-victimdir* "/Users/alex/mongo-java-driver/")

(defn victimdir
  "returns the directory to be analyzed by cleavage"
  []
  (file *git-victimdir*))

(defn repository
  "a JGit Repository instance generated by readings *git-victimdir*"
  []
  (.. (RepositoryBuilder.) (findGitDir (victimdir)) (build)))

(defn relative-path
  [file]
  (str/replace (.getPath file) *git-victimdir* ""))

(defn resolve-revision
  [revision]
  (.resolve (repository) revision))

(defn commit-count
  "a count of all the commits touching a specific file"
  [file revsision]
  (let [rw (RevWalk. (repository))]
    (.markStart rw (.parseCommit rw (resolve-revision revsision)))
    (.setTreeFilter rw (AndTreeFilter/create (PathFilter/create (relative-path file)) TreeFilter/ANY_DIFF))
    (count (seq rw))))

(defn victim-files
  "returns lazyseq of all the files in victimdir"
  []
  (filter
   #(re-find (re-pattern "\\.java$")
	     (.getName %1))
   (file-seq (victimdir))))

(defn cyclomatches
  [string]
  (count (re-seq #"for|if|while|case|catch|&&|\\\|\\\||\\\?" string)))

(defn cyclomatic-complexity
  "returns the cyclomatic complexity for one file"
  [file]
  (cyclomatches (slurp file)))

(defn complexity
  "returns a numeric complexity score for some file"
  [file revision]
  (cyclomatic-complexity file))

(defn scatter-plot
  [revision]
  (map #(vector (.getName %1) (complexity %1 revision) (commit-count %1 revision)) (victim-files)))


